@model NaveedElectronicWeb.NEModel.CustomerOrder
@{ 
    List<NaveedElectronicWeb.NEModel.Guarantor> list = ViewBag.Guarantors;
    var duedate = Model.DueDate;
}
 

@Html.Hidden("HDueDate",duedate,new { id="HDueDate" })
<h4>Edit Order</h4>
<hr />
<p>
   <ul class="breadcrumb">
       <li class="active">
           <strong>
               @Html.ActionLink("Back to Details", "Details", new { id = Model.Id })
           </strong>
       </li>
   </ul>
</p>

<div class="row">
    <div class="col-md-4">
        <ul id="mainboard" class="list-group">
            <li class="list-group-item active">
                Order
            </li>
            <li class="list-group-item">
                <small class="text-info">Order by</small>
                <h5><strong>@Model.Customer.CustomerName</strong> <small>@Model.Customer.City.CityName</small></h5>
            </li>
            <li class="list-group-item">
                <small class="text-info">Guarantor</small>
                @if (Model.Guarantor != null)
                {
                    <h5><strong>@Model.Guarantor.GuarantorName</strong></h5>
                }
                else
                {
                    <h5><strong>No Guarantor</strong></h5>
                }
            </li>
            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-6">
                        <small class="text-info">Order Date</small>
                        <h5><strong>@Model.OrderDate.ToString("ddd, dd MMM yyyy")</strong></h5>
                    </div>
                    <div class="col-md-6">
                        <small class="text-info">Due Date</small>
                        <h5><strong>@Model.DueDate.ToString("ddd, dd MMM yyyy")</strong></h5>
                    </div>
                </div>
            </li>
            @{
                int GrandTotal = Model.OrderDetails.Sum(od => (od.SalePrice * od.Quantity) - od.Discount);
                int NetPayment = Model.OrderPayments.Sum(op => op.AmountPaid);
                int NetDues = GrandTotal - NetPayment;
            }
            @if (NetDues > 0 && Model.MonthlyInstallment > 0 && Model.DueDate.Day == 5)
            {
                int NoOfInstallments = 0;

                NoOfInstallments = (int)(NetDues / Model.MonthlyInstallment);
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-md-6">
                            <small class="text-info">Monthly Installment</small>
                            @{
                                var Month = Model.DueDate.Month;
                                var Day = Model.DueDate.Day;
                                var Year = Model.DueDate.Year;

                                Month = Month - 1;
                                if (Month == 0)
                                {
                                    Month = 12;
                                    Year--;
                                }
                                var InstallmentFrom = new DateTime(Year, Month, Day);
                                var Today = DateTime.Today;

                                var Days = Today - InstallmentFrom;
                                var DaysDiff = Days.Days;
                                var NoOfInstallmets = Math.Ceiling((decimal)Days.Days / 30);

                                if (DaysDiff > 0)
                                {
                                    <h5><strong>@Model.MonthlyInstallment x @NoOfInstallmets</strong></h5>
                                }
                                else
                                {
                                    <h5><strong>@Model.MonthlyInstallment</strong></h5>
                                }
                            }
                        </div>
                        <div class="col-md-6">
                            <small class="text-info">Remaining</small>
                            <h5>
                                <strong>
                                    @NoOfInstallments
                                </strong>
                            </h5>
                        </div>
                    </div>
                </li>
            }
            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-4">
                        <small class="text-info">Total</small>
                        <h5><strong>@GrandTotal.00</strong></h5>
                    </div>
                    <div class="col-md-4">
                        <small class="text-info">Payment</small>
                        <h5><strong>@NetPayment.00</strong></h5>
                    </div>
                    <div class="col-md-4">
                        <small class="text-info">Dues</small>
                        <h5><strong id="TotalDues">@NetDues.00</strong></h5>
                    </div>
                </div>
            </li>
             
        </ul>
    </div>
    <div class="col-md-8">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(m => m.CustomerId)
                @Html.HiddenFor(m => m.UserId)
                @Html.HiddenFor(m => m.OrderDate)



                <div class="form-group">

                    <div class="control-label col-md-2">
                        <label>Guarantor</label>
                    </div>
                    <div class="col-md-4">
                        
                        @Html.DropDownListFor(m => m.GuarantorId, new SelectList(list, "Id", "GuarantorName"), "Select Guarantor", new { @class = "form-control" })
                        
                            @Html.ActionLink("Add new", "Create", "Guarantor", new { customerid = Model.CustomerId }, new { target="_blank", @class = "text-dark" })
                        
                        @Html.ValidationMessageFor(model => model.GuarantorId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">

                    <div class="control-label col-md-2">
                        <label>Installment</label>
                    </div>
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.MonthlyInstallment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MonthlyInstallment, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-md-2">
                        <label>Due Date</label>
                    </div>
                    <div class="col-md-4 col-sm-4">


                        <div class="input-group date" id="dudate">
                            <input class="form-control text-box single-line valid" data-date-format="ddd,DD MMM YYYY" data-val="true" data-val-date="Please enter valid Date." data-val-required="Please enter valid date." id="DueDate" name="DueDate" type="datetime" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        <span class="text-danger field-validation-valid" data-valmsg-for="DueDate" data-valmsg-replace="true"></span>

                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-4">
                        <input type="submit" value="Save" class="btn btn-warning" />
                    </div>
                </div>
            </div>
        }

    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
 
    <script>
    $(function () {


        var duedatestring = $("#HDueDate").val(); 
        var orderdatestring = $("#OrderDate").val();
        var date = Date.parse(duedatestring);
        var mindate = Date.parse(orderdatestring);
        $('#dudate').datetimepicker({
            defaultDate: new Date(date),
            minDate: new Date(mindate)
        });
        
    });




        $('#dudate').on("dp.change", function (date) {
    });
   


    $(document).on('click', 'span.month, th.next, th.prev, th.switch, span.year', function (e) {

        e.stopPropagation();
    });
    </script>
}