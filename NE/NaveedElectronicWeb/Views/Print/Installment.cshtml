@model List<IGrouping<string,NaveedElectronicWeb.NEModel.CustomerOrder>>

@{ 
    DateTime start = ViewBag.Start;
    DateTime end = ViewBag.End;
}
<style>
    .city-danger {
        color: #581a1a !important;
    }
</style>

<link href="~/Content/PrintPage.css" rel="stylesheet" />
<div class="hidden-print">
    <p>
        <ul class="breadcrumb">
            <li class="active">
                <strong>
                    @Html.ActionLink("Dashboard", "Index", "Home")
                </strong>
            </li>
            <li>
                <button class="btn btn-link" onclick="Print()">Print</button>
            </li>
        </ul>
    </p>
</div>
<div class="visible-print">
    <div class="print-page">


        <div class="row">

            <div class="print-heading">

                <h1 class="text-center">Customer List With Remaining Amount</h1>

            </div>
        </div>
        <div class="row">
            &nbsp;
        </div>
        <div class="row">

            <div class="print-title-right text-left">
                <div class="col-xs-7">
                    <h2>
                        <span class="glyphicon glyphicon-leaf icon"></span> Naveed Electronics
                    </h2>
                </div>
                <div class="col-xs-5">
                    <small>Bagh Dehrai Road Main Bazar </small> <br />
                    <small>Bara Durushkhela Matta Swat</small>

                </div>
            </div>

            <div class="print-title-empty text-left">
                <h4>
                    <span class="glyphicon glyphicon-phone-alt icon-empty"></span> 0946-795569
                    &nbsp;
                    <span class="glyphicon glyphicon-phone icon-empty"></span> 0345-945-1182
                    &nbsp;<span class="glyphicon glyphicon-phone icon-empty"></span> 0313-808-0788
                </h4>



            </div>

        </div>
        @{
            int PrintTotalQuantity = Model.Sum(group => group.Sum(o => o.OrderDetails.Sum(od => od.Quantity)));
            int PrintGrandNetAmount = Model.Sum(group => group.Sum(o => o.OrderDetails.Sum(od => (od.Quantity * od.SalePrice) - od.Discount)));
            int PrintGrandPaid = Model.Sum(group => group.Sum(o => o.OrderPayments.Sum(op => op.AmountPaid)));

            int PrintGrandDues = PrintGrandNetAmount - PrintGrandPaid;


        }
        <div class="row">
            <!--Customer header-->
            <div class="col-xs-5">
                <div class="client-empty text-left">
                    <h3>
                        Due Orders
                    </h3>
                </div>
                <div class="client-heading text-left">
                    <h3>
                        <span class="glyphicon glyphicon-calendar icon-client"></span>
                        <small>From : @start.ToString("dddd, dd MMMM yyyy") </small>
                    </h3>
                </div>
                <div class="client-heading text-left">
                    <h3>
                        <span class="glyphicon glyphicon-calendar icon-client"></span>
                        <small>To : @end.ToString("dddd, dd MMMM yyyy") </small>
                    </h3>
                </div>


            </div>
            <div class="col-xs-2"></div>

            <!--Guarantor header-->

            <div class="col-xs-5  text-right">

                <div class="client-empty text-left">
                    <h3>
                        Total Dues
                    </h3>
                </div>
                <div class="client-heading text-left">
                    <h3>
                        <span class="glyphicon glyphicon-share-alt icon-client"></span>
                        <small> PKR</small>

                        @PrintGrandDues<small>.00</small>

                    </h3>
                </div>

            </div>

        </div>

        <div class="row">
            &nbsp;
        </div>

        <div class="row">
            <div class="col-xs-12">



                <table class=" table table-striped table-responsive">

                    @{
                        int row = 1;
                        int grouprow = 1;
                    }
                    @foreach (var group in Model)
                    {
                        <tr class="info">
                            <th class="border-bottom "><h1 class="group-header">@grouprow</h1></th>
                            <th colspan="9" class="border-bottom">
                                <h1 class="group-header">@group.Key</h1>
                            </th>
                        </tr>
                        <tr class="info">
                            <th>S.No</th>
                            <th>Order_Date</th>
                            <th colspan="2">Customer</th>

                            <th>Due_Date</th>
                            <th class="text-center" colspan="2">Installment</th>

                            <th class="text-center">Total</th>
                            <th class="text-center">Paid </th>
                            <th class="text-center">Dues </th>
                        </tr>
                        row = 1;
                        foreach (var item in group)
                        {


                            <tr>
                                @{
                                    string rowtext = grouprow.ToString() + "." + row.ToString();
                                }
                                <td><br />@rowtext</td>
                                <td>
                                    <br /> @item.OrderDate.ToString("dd, MMM, yyyy")
                                </td>
                                <td colspan="2">
                                    @item.Customer.CustomerName s/d of <small class="sibling-text">@item.Customer.FatherName</small>


                                    @if (item.Customer.CustomerContacts.Count > 0)
                                    { <br />
                                        var contacts = item.Customer.CustomerContacts;

                                        contacts = contacts.Count > 2 ? contacts.Take(2).ToList() : contacts;

                                        foreach (var contact in contacts)
                                        {
                                            <small class="contact-text">@contact.Number &nbsp; </small>

                                        }
                                    }


                                    @if (item.Guarantor != null)
                                    { <br />
                                    <strong class="sibling-text">@item.Guarantor.GuarantorName</strong> <small class="sibling-text">@item.Guarantor.Contact</small>
                                    }
                                    else
                                    {
                                        <br />
                                        <strong class="sibling-text">No Guarantor</strong>
                                    }

                                </td>


                                <td><br /> @item.DueDate.ToString("dd, MMM, yyyy")</td>
                                @{
                                    int PrintTotalProducts = item.OrderDetails.Sum(o => o.Quantity);
                                    int PrintNetAmount = item.OrderDetails.Sum(o => (o.SalePrice * o.Quantity) - o.Discount);
                                    int PrintPaid = item.OrderPayments.Sum(o => o.AmountPaid);
                                    int PrintDues = PrintNetAmount - PrintPaid;

                                    if (item.MonthlyInstallment > 0)
                                    {
                                        var Month = item.DueDate.Month;
                                        var Day = item.DueDate.Day;
                                        var Year = item.DueDate.Year;

                                        Month = Month - 1;
                                        if (Month == 0)
                                        {
                                            Month = 12;
                                            Year--;
                                        }
                                        var InstallmentFrom = new DateTime(Year, Month, Day);
                                        var Today = DateTime.Today;

                                        var Days = Today - InstallmentFrom;
                                        var DaysDiff = Days.Days;
                                        var NoOfInstallmets = Math.Ceiling((decimal)Days.Days / 30);

                                        if (DaysDiff > 0)
                                        {
                                            <td colspan="2" class="text-center"><br /> <h3 class="text-danger">@item.MonthlyInstallment x   @NoOfInstallmets</h3>  </td>

                                        }
                                        else
                                        {
                                            <td colspan="2" class="text-center">
                                                <br />
                                                <h3 class="text-danger">@item.MonthlyInstallment</h3>
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        <td colspan="2" class="text-center"><br /> <h3 class="text-danger">@item.MonthlyInstallment</h3> </td>
                                    }
                                }

                                <td class="text-center"><br /> @PrintNetAmount</td>
                                <td class="text-center"><br /> @PrintPaid</td>
                                <td class="text-center"><br /> @PrintDues</td>
                            </tr>

                                        row++;
                                    }

                                    var groupInstallment = group.Sum(o => o.MonthlyInstallment);
                                    var groupTotalQuantity = group.Sum(o => o.OrderDetails.Sum(od => od.Quantity));
                                    var groupdues = 0;
                                    var grouppayment = group.Sum(o => o.OrderPayments.Sum(op => op.AmountPaid));
                                    var grouptotal = group.Sum(o => o.OrderDetails.Sum(od => (od.Quantity * od.SalePrice) - od.Discount));
                                    groupdues = grouptotal - grouppayment;
                                    <tr>


                                        <th></th>

                                        <th class="text-center" colspan="3">Total of @group.Key</th>
                                        <th class="text-center" colspan="3">@grouppayment</th>
                                        <th class="text-center" colspan="3">@groupdues</th>
                                    </tr>
                                        grouprow++;
                                    }


                    <tr>


                        <th></th>

                        <th class="text-center" colspan="3"> Grand Total</th>
                        <th class="text-center" colspan="3">@PrintGrandPaid</th>
                        <th class="text-center" colspan="3">@PrintGrandDues</th>
                    </tr>
                </table>

            </div>
        </div>


        <div class="row">
            <hr />
        </div>

        <div class="row">
            <div class="col-xs-12">
                <div class="col-xs-6">
                    <span class="glyphicon glyphicon-copyright-mark icon-empty"></span> <span class="trad">2017</span> &nbsp; <span class="glyphicon glyphicon-leaf icon-empty"></span> &nbsp;<span class="trad">Naveed Electronics</span>
                    <br />
                    <strong class="text-dark"> <span class="glyphicon glyphicon-calendar icon-empty"></span> Date Printed @DateTime.Now.ToString("dd-MMM-yyyy") @DateTime.Now.ToString("h:mm tt")</strong>
                </div>
                <div class="col-xs-6 text-right">
                    <span class="glyphicon glyphicon-star icon-empty"></span><span class="trad"> Powerd by Udhyana</span> <span class="glyphicon glyphicon-phone icon-empty"></span><span class="trad"> 0346-947-6404</span>
                </div>
            </div>

        </div>

    </div>

</div>

@section Scripts{

    <script>
        $(document).ready(Print);


        function Print() {
            window.print();
        }
    </script>
}